<?php

/**
 * @file
 * Enables the use of donation forms to give money on your site.
 */

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_entity_extra_field_info().
 */
function giveauthnet_entity_extra_field_info() {
  $fields = array();
  foreach (array_keys(entity_get_bundles('give_donation')) as $bundle) {
    $fields['give_donation'][$bundle]['form']['name'] = array(
      'label' => t('Donor name'),
      'description' => t('Text'),
      'weight' => -50,
    );
    $fields['give_donation'][$bundle]['form']['mail'] = array(
      'label' => t('Donor e-mail'),
      'description' => t('Email'),
      'weight' => -40,
    );
    $fields['give_donation'][$bundle]['form']['recurring'] = array(
      'label' => t('Recurring donation'),
      'description' => t('Option'),
      'weight' => 50,
    );
  }
  return $fields;
}

/**
 * Implements hook_mail().
 */
function giveauthnet_mail($key, &$message, $params) {
  $give_donation = $params['give_donation'];
  /** @var $donor \Drupal\user\UserInterface */
  $donor = $params['donor'];
  $language = \Drupal::languageManager()->getLanguage($message['langcode']);

  $variables = array(
    '@site-name' => \Drupal::config('system.site')->get('name'),
    '@label' => $give_donation->getLabel(),
    '@form' => !empty($params['give_form']) ? $params['give_form']->label() : NULL,
    '@form-url' => \Drupal::url('<current>', [], ['absolute' => TRUE, 'language' => $language]),
    '@donor-name' => $donor->getDisplayName(),
  );
  if ($donor->isAuthenticated()) {
    $variables['@donor-url'] = $donor->url('canonical', array('absolute' => TRUE, 'language' => $language));
  }
  else {
    $variables['@donor-url'] = $params['donor']->getEmail();
  }

  switch ($key) {
    case 'donation_notice':
      $options = array('langcode' => $language->getId());
      $message['subject'] .= t('[@form] @label', $variables, $options);
      $message['body'][] = t("@donor-name (@donor-url) gave a donation through form @form-url.", $variables, $options);
      $build = entity_view($give_donation, 'mail');
      $message['body'][] = \Drupal::service('renderer')->renderPlain($build);
      break;

    case 'donation_receipt':
      $message['subject'] .= giveauthnet_replace_donation_tokens($params['give_form']->getSubject(), $give_donation);

      $message['body'][] = giveauthnet_replace_donation_tokens($params['give_form']->getReply(), $give_donation);
      break;

  }
}

/**
 * Simple no-dependency token replacement.  More robust would be better.
 */
function giveauthnet_replace_donation_tokens($message, \Drupal\give\DonationInterface $donation) {
  $search_replace = array(
    '[donor_name]' => $donation->getDonorName(),
    '[donor_email]' => $donation->getDonorMail(),
    '[give_label]' => $donation->getGiveForm()->label(),
    '[dollar_amount]' => $donation->getDollarAmount(),
    '[recurring]' => $donation->recurring() ? 'recurring ' : '',
    '[today_date]' => strftime('%B %e, %Y'),
    '[date]' => strftime('%B %e, %Y', $donation->getUpdatedTime()),
  );
  return str_replace(array_keys($search_replace), array_values($search_replace), $message);
}

/**
 * Implements hook_theme().
 */
function giveauthnet_theme($existing, $type, $theme, $path) {
  return [
    'authnet_link_page' => [
      'variables' => ['authnet_token' => NULL, 'amount' => NULL]
    ],
    'authnet_cancel_page' => [],
    'authnet_thanks_page' => [],
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function giveauthnet_preprocess_authnet_link_page(&$variables) {
  $config = \Drupal::config('giveauthnet.settings');
  $variables['confirm_message'] = $config->get('confirm_message', '');
  $sandobox_url = "https://test.authorize.net/payment/payment";
  $production_url = "https://accept.authorize.net/payment/payment";
  $variables['authnet_url'] = $config->get('test_enviroment', 0) ? $sandobox_url : $production_url;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function giveauthnet_preprocess_authnet_cancel_page(&$variables) {
  $config = \Drupal::config('giveauthnet.settings');
  $variables['cancel_message'] = $config->get('cancel_message', '');
}

/**
 * Implements hook_preprocess_HOOK().
 */
function giveauthnet_preprocess_authnet_thanks_page(&$variables) {
  $config = \Drupal::config('giveauthnet.settings');
  $variables['thanks_message'] = $config->get('thanks_message', '');
}
